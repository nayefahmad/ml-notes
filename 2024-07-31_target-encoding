{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8b390a0e",
   "metadata": {
    "papermill": {
     "duration": 0.007466,
     "end_time": "2024-10-24T22:13:29.391075",
     "exception": false,
     "start_time": "2024-10-24T22:13:29.383609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "Most of the techniques we've seen in this course have been for numerical features. The technique we'll look at in this lesson, *target encoding*, is instead meant for categorical features. It's a method of encoding categories as numbers, like one-hot or label encoding, with the difference that it also uses the *target* to create the encoding. This makes it what we call a **supervised** feature engineering technique."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1e3aef55",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:29.406464Z",
     "iopub.status.busy": "2024-10-24T22:13:29.406006Z",
     "iopub.status.idle": "2024-10-24T22:13:30.502032Z",
     "shell.execute_reply": "2024-10-24T22:13:30.500758Z"
    },
    "papermill": {
     "duration": 1.10752,
     "end_time": "2024-10-24T22:13:30.505485",
     "exception": false,
     "start_time": "2024-10-24T22:13:29.397965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "autos = pd.read_csv(\"../input/fe-course-data/autos.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e440474f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:30.521261Z",
     "iopub.status.busy": "2024-10-24T22:13:30.520779Z",
     "iopub.status.idle": "2024-10-24T22:13:30.573382Z",
     "shell.execute_reply": "2024-10-24T22:13:30.571689Z"
    },
    "papermill": {
     "duration": 0.063902,
     "end_time": "2024-10-24T22:13:30.576228",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.512326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symboling</th>\n",
       "      <th>make</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>num_of_doors</th>\n",
       "      <th>body_style</th>\n",
       "      <th>drive_wheels</th>\n",
       "      <th>engine_location</th>\n",
       "      <th>wheel_base</th>\n",
       "      <th>length</th>\n",
       "      <th>...</th>\n",
       "      <th>engine_size</th>\n",
       "      <th>fuel_system</th>\n",
       "      <th>bore</th>\n",
       "      <th>stroke</th>\n",
       "      <th>compression_ratio</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>peak_rpm</th>\n",
       "      <th>city_mpg</th>\n",
       "      <th>highway_mpg</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>2</td>\n",
       "      <td>convertible</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>88.6</td>\n",
       "      <td>168.8</td>\n",
       "      <td>...</td>\n",
       "      <td>130</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.47</td>\n",
       "      <td>2.68</td>\n",
       "      <td>9</td>\n",
       "      <td>111</td>\n",
       "      <td>5000</td>\n",
       "      <td>21</td>\n",
       "      <td>27</td>\n",
       "      <td>13495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>2</td>\n",
       "      <td>convertible</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>88.6</td>\n",
       "      <td>168.8</td>\n",
       "      <td>...</td>\n",
       "      <td>130</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.47</td>\n",
       "      <td>2.68</td>\n",
       "      <td>9</td>\n",
       "      <td>111</td>\n",
       "      <td>5000</td>\n",
       "      <td>21</td>\n",
       "      <td>27</td>\n",
       "      <td>16500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>2</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>94.5</td>\n",
       "      <td>171.2</td>\n",
       "      <td>...</td>\n",
       "      <td>152</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>2.68</td>\n",
       "      <td>3.47</td>\n",
       "      <td>9</td>\n",
       "      <td>154</td>\n",
       "      <td>5000</td>\n",
       "      <td>19</td>\n",
       "      <td>26</td>\n",
       "      <td>16500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>audi</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>4</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>99.8</td>\n",
       "      <td>176.6</td>\n",
       "      <td>...</td>\n",
       "      <td>109</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.19</td>\n",
       "      <td>3.40</td>\n",
       "      <td>10</td>\n",
       "      <td>102</td>\n",
       "      <td>5500</td>\n",
       "      <td>24</td>\n",
       "      <td>30</td>\n",
       "      <td>13950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>audi</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>4</td>\n",
       "      <td>sedan</td>\n",
       "      <td>4wd</td>\n",
       "      <td>front</td>\n",
       "      <td>99.4</td>\n",
       "      <td>176.6</td>\n",
       "      <td>...</td>\n",
       "      <td>136</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.19</td>\n",
       "      <td>3.40</td>\n",
       "      <td>8</td>\n",
       "      <td>115</td>\n",
       "      <td>5500</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>17450</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   symboling         make fuel_type aspiration  num_of_doors   body_style  \\\n",
       "0          3  alfa-romero       gas        std             2  convertible   \n",
       "1          3  alfa-romero       gas        std             2  convertible   \n",
       "2          1  alfa-romero       gas        std             2    hatchback   \n",
       "3          2         audi       gas        std             4        sedan   \n",
       "4          2         audi       gas        std             4        sedan   \n",
       "\n",
       "  drive_wheels engine_location  wheel_base  length  ...  engine_size  \\\n",
       "0          rwd           front        88.6   168.8  ...          130   \n",
       "1          rwd           front        88.6   168.8  ...          130   \n",
       "2          rwd           front        94.5   171.2  ...          152   \n",
       "3          fwd           front        99.8   176.6  ...          109   \n",
       "4          4wd           front        99.4   176.6  ...          136   \n",
       "\n",
       "   fuel_system  bore stroke  compression_ratio  horsepower peak_rpm  city_mpg  \\\n",
       "0         mpfi  3.47   2.68                  9         111     5000        21   \n",
       "1         mpfi  3.47   2.68                  9         111     5000        21   \n",
       "2         mpfi  2.68   3.47                  9         154     5000        19   \n",
       "3         mpfi  3.19   3.40                 10         102     5500        24   \n",
       "4         mpfi  3.19   3.40                  8         115     5500        18   \n",
       "\n",
       "   highway_mpg  price  \n",
       "0           27  13495  \n",
       "1           27  16500  \n",
       "2           26  16500  \n",
       "3           30  13950  \n",
       "4           22  17450  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autos.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "05ec034f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:30.592384Z",
     "iopub.status.busy": "2024-10-24T22:13:30.591917Z",
     "iopub.status.idle": "2024-10-24T22:13:30.622259Z",
     "shell.execute_reply": "2024-10-24T22:13:30.620696Z"
    },
    "papermill": {
     "duration": 0.042222,
     "end_time": "2024-10-24T22:13:30.625620",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.583398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 193 entries, 0 to 192\n",
      "Data columns (total 25 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   symboling          193 non-null    int64  \n",
      " 1   make               193 non-null    object \n",
      " 2   fuel_type          193 non-null    object \n",
      " 3   aspiration         193 non-null    object \n",
      " 4   num_of_doors       193 non-null    int64  \n",
      " 5   body_style         193 non-null    object \n",
      " 6   drive_wheels       193 non-null    object \n",
      " 7   engine_location    193 non-null    object \n",
      " 8   wheel_base         193 non-null    float64\n",
      " 9   length             193 non-null    float64\n",
      " 10  width              193 non-null    float64\n",
      " 11  height             193 non-null    float64\n",
      " 12  curb_weight        193 non-null    int64  \n",
      " 13  engine_type        193 non-null    object \n",
      " 14  num_of_cylinders   193 non-null    int64  \n",
      " 15  engine_size        193 non-null    int64  \n",
      " 16  fuel_system        193 non-null    object \n",
      " 17  bore               193 non-null    float64\n",
      " 18  stroke             193 non-null    float64\n",
      " 19  compression_ratio  193 non-null    int64  \n",
      " 20  horsepower         193 non-null    int64  \n",
      " 21  peak_rpm           193 non-null    int64  \n",
      " 22  city_mpg           193 non-null    int64  \n",
      " 23  highway_mpg        193 non-null    int64  \n",
      " 24  price              193 non-null    int64  \n",
      "dtypes: float64(6), int64(11), object(8)\n",
      "memory usage: 37.8+ KB\n"
     ]
    }
   ],
   "source": [
    "autos.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "331c706f",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.007012,
     "end_time": "2024-10-24T22:13:30.640795",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.633783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Target Encoding #\n",
    "\n",
    "A **target encoding** is any kind of encoding that replaces a feature's categories with some number derived from the target.\n",
    "\n",
    "A simple and effective version is to apply a group aggregation from Lesson 3, like the mean. Using the *Automobiles* dataset, this computes the average price of each vehicle's make:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5f842150",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:30.657553Z",
     "iopub.status.busy": "2024-10-24T22:13:30.657061Z",
     "iopub.status.idle": "2024-10-24T22:13:30.671066Z",
     "shell.execute_reply": "2024-10-24T22:13:30.669678Z"
    },
    "papermill": {
     "duration": 0.026075,
     "end_time": "2024-10-24T22:13:30.674257",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.648182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "make\n",
       "toyota           31\n",
       "nissan           17\n",
       "subaru           12\n",
       "mazda            12\n",
       "mitsubishi       12\n",
       "honda            12\n",
       "volkswagen       12\n",
       "peugot           11\n",
       "volvo            11\n",
       "dodge             8\n",
       "bmw               8\n",
       "mercedes-benz     8\n",
       "plymouth          7\n",
       "audi              6\n",
       "saab              6\n",
       "porsche           4\n",
       "jaguar            3\n",
       "chevrolet         3\n",
       "alfa-romero       2\n",
       "isuzu             2\n",
       "mercury           1\n",
       "Name: price, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autos.groupby('make')['price'].nunique().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c5dd9764",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:30.691040Z",
     "iopub.status.busy": "2024-10-24T22:13:30.690610Z",
     "iopub.status.idle": "2024-10-24T22:13:30.714806Z",
     "shell.execute_reply": "2024-10-24T22:13:30.713712Z"
    },
    "papermill": {
     "duration": 0.035892,
     "end_time": "2024-10-24T22:13:30.717681",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.681789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>mercury</td>\n",
       "      <td>16503</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       make  price\n",
       "66  mercury  16503"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autos.query('make == \"mercury\"')[['make', 'price']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7065c858",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:30.736359Z",
     "iopub.status.busy": "2024-10-24T22:13:30.735872Z",
     "iopub.status.idle": "2024-10-24T22:13:30.760831Z",
     "shell.execute_reply": "2024-10-24T22:13:30.759405Z"
    },
    "papermill": {
     "duration": 0.037329,
     "end_time": "2024-10-24T22:13:30.763806",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.726477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>audi</td>\n",
       "      <td>13950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>audi</td>\n",
       "      <td>17450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>audi</td>\n",
       "      <td>15250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>audi</td>\n",
       "      <td>17710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>audi</td>\n",
       "      <td>18920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>audi</td>\n",
       "      <td>23875</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   make  price\n",
       "3  audi  13950\n",
       "4  audi  17450\n",
       "5  audi  15250\n",
       "6  audi  17710\n",
       "7  audi  18920\n",
       "8  audi  23875"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autos.query('make == \"audi\"')[['make', 'price']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bfe0c1c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:30.782119Z",
     "iopub.status.busy": "2024-10-24T22:13:30.781637Z",
     "iopub.status.idle": "2024-10-24T22:13:30.810565Z",
     "shell.execute_reply": "2024-10-24T22:13:30.809289Z"
    },
    "papermill": {
     "duration": 0.041412,
     "end_time": "2024-10-24T22:13:30.813400",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.771988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>price</th>\n",
       "      <th>make_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>toyota</td>\n",
       "      <td>5348</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>toyota</td>\n",
       "      <td>6338</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>toyota</td>\n",
       "      <td>6488</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>toyota</td>\n",
       "      <td>6918</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>toyota</td>\n",
       "      <td>7898</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>toyota</td>\n",
       "      <td>8778</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>toyota</td>\n",
       "      <td>6938</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>toyota</td>\n",
       "      <td>7198</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>toyota</td>\n",
       "      <td>7898</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>toyota</td>\n",
       "      <td>7788</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>toyota</td>\n",
       "      <td>7738</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>toyota</td>\n",
       "      <td>8358</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>toyota</td>\n",
       "      <td>9258</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>toyota</td>\n",
       "      <td>8058</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>toyota</td>\n",
       "      <td>8238</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>toyota</td>\n",
       "      <td>9298</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>toyota</td>\n",
       "      <td>9538</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>toyota</td>\n",
       "      <td>8449</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>toyota</td>\n",
       "      <td>9639</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>toyota</td>\n",
       "      <td>9989</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>toyota</td>\n",
       "      <td>11199</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>toyota</td>\n",
       "      <td>11549</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>toyota</td>\n",
       "      <td>17669</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>toyota</td>\n",
       "      <td>8948</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>toyota</td>\n",
       "      <td>10698</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163</th>\n",
       "      <td>toyota</td>\n",
       "      <td>9988</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>toyota</td>\n",
       "      <td>10898</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>toyota</td>\n",
       "      <td>11248</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>toyota</td>\n",
       "      <td>16558</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>toyota</td>\n",
       "      <td>15998</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>toyota</td>\n",
       "      <td>15690</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>toyota</td>\n",
       "      <td>15750</td>\n",
       "      <td>9885.8125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       make  price  make_encoded\n",
       "138  toyota   5348     9885.8125\n",
       "139  toyota   6338     9885.8125\n",
       "140  toyota   6488     9885.8125\n",
       "141  toyota   6918     9885.8125\n",
       "142  toyota   7898     9885.8125\n",
       "143  toyota   8778     9885.8125\n",
       "144  toyota   6938     9885.8125\n",
       "145  toyota   7198     9885.8125\n",
       "146  toyota   7898     9885.8125\n",
       "147  toyota   7788     9885.8125\n",
       "148  toyota   7738     9885.8125\n",
       "149  toyota   8358     9885.8125\n",
       "150  toyota   9258     9885.8125\n",
       "151  toyota   8058     9885.8125\n",
       "152  toyota   8238     9885.8125\n",
       "153  toyota   9298     9885.8125\n",
       "154  toyota   9538     9885.8125\n",
       "155  toyota   8449     9885.8125\n",
       "156  toyota   9639     9885.8125\n",
       "157  toyota   9989     9885.8125\n",
       "158  toyota  11199     9885.8125\n",
       "159  toyota  11549     9885.8125\n",
       "160  toyota  17669     9885.8125\n",
       "161  toyota   8948     9885.8125\n",
       "162  toyota  10698     9885.8125\n",
       "163  toyota   9988     9885.8125\n",
       "164  toyota  10898     9885.8125\n",
       "165  toyota  11248     9885.8125\n",
       "166  toyota  16558     9885.8125\n",
       "167  toyota  15998     9885.8125\n",
       "168  toyota  15690     9885.8125\n",
       "169  toyota  15750     9885.8125"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autos[\"make_encoded\"] = autos.groupby(\"make\")[\"price\"].transform(\"mean\")\n",
    "\n",
    "autos[[\"make\", \"price\", \"make_encoded\"]].query('make == \"toyota\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cf806049",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:30.833149Z",
     "iopub.status.busy": "2024-10-24T22:13:30.832706Z",
     "iopub.status.idle": "2024-10-24T22:13:30.852099Z",
     "shell.execute_reply": "2024-10-24T22:13:30.850720Z"
    },
    "papermill": {
     "duration": 0.032489,
     "end_time": "2024-10-24T22:13:30.854732",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.822243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>price</th>\n",
       "      <th>make_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>audi</td>\n",
       "      <td>13950</td>\n",
       "      <td>17859.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>audi</td>\n",
       "      <td>17450</td>\n",
       "      <td>17859.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>audi</td>\n",
       "      <td>15250</td>\n",
       "      <td>17859.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>audi</td>\n",
       "      <td>17710</td>\n",
       "      <td>17859.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>audi</td>\n",
       "      <td>18920</td>\n",
       "      <td>17859.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>audi</td>\n",
       "      <td>23875</td>\n",
       "      <td>17859.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>mercury</td>\n",
       "      <td>16503</td>\n",
       "      <td>16503.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       make  price  make_encoded\n",
       "3      audi  13950  17859.166667\n",
       "4      audi  17450  17859.166667\n",
       "5      audi  15250  17859.166667\n",
       "6      audi  17710  17859.166667\n",
       "7      audi  18920  17859.166667\n",
       "8      audi  23875  17859.166667\n",
       "66  mercury  16503  16503.000000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autos[[\"make\", \"price\", \"make_encoded\"]].query('make == \"audi\" | make == \"mercury\"')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1098767e",
   "metadata": {
    "papermill": {
     "duration": 0.008271,
     "end_time": "2024-10-24T22:13:30.871818",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.863547",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This kind of target encoding is sometimes called a **mean encoding**. Applied to a binary target, it's also called **bin counting**. (Other names you might come across include: likelihood encoding, impact encoding, and leave-one-out encoding.)\n",
    "\n",
    "# Smoothing #\n",
    "\n",
    "An encoding like this presents a couple of problems, however. First are *unknown categories*. Target encodings create a special risk of overfitting, which means they need to be trained on an independent \"encoding\" split. When you join the encoding to future splits, Pandas will fill in missing values for any categories not present in the encoding split. These missing values you would have to impute somehow.\n",
    "\n",
    "Second are *rare categories*. When a category only occurs a few times in the dataset, any statistics calculated on its group are unlikely to be very accurate. In the *Automobiles* dataset, the `mercurcy` make only occurs once. The \"mean\" price we calculated is just the price of that one vehicle, which might not be very representative of any Mercuries we might see in the future. Target encoding rare categories can make overfitting more likely.\n",
    "\n",
    "A solution to these problems is to add **smoothing**. The idea is to blend the *in-category* average with the *overall* average. Rare categories get less weight on their category average, while missing categories just get the overall average.\n",
    "\n",
    "In pseudocode:\n",
    "```\n",
    "encoding = weight * in_category + (1 - weight) * overall\n",
    "```\n",
    "where `weight` is a value between 0 and 1 calculated from the category frequency.\n",
    "\n",
    "An easy way to determine the value for `weight` is to compute an **m-estimate**:\n",
    "```\n",
    "weight = n / (n + m)\n",
    "```\n",
    "where `n` is the total number of times that category occurs in the data. The parameter `m` determines the \"smoothing factor\". Larger values of `m` put more weight on the overall estimate.\n",
    "\n",
    "<figure style=\"padding: 1em;\">\n",
    "<img src=\"https://storage.googleapis.com/kaggle-media/learn/images/1uVtQEz.png\" width=500, alt=\"\">\n",
    "<figcaption style=\"textalign: center; font-style: italic\"><center>\n",
    "</center></figcaption>\n",
    "</figure>\n",
    "\n",
    "In the *Automobiles* dataset there are three cars with the make `chevrolet`. If you chose `m=2.0`, then the `chevrolet` category would be encoded with 60% of the average Chevrolet price plus 40% of the overall average price.\n",
    "```\n",
    "chevrolet = 0.6 * 6000.00 + 0.4 * 13285.03\n",
    "```\n",
    "\n",
    "When choosing a value for `m`, consider how noisy you expect the categories to be. Does the price of a vehicle vary a great deal within each make? Would you need a lot of data to get good estimates? If so, it could be better to choose a larger value for `m`; if the average price for each make were relatively stable, a smaller value could be okay.\n",
    "\n",
    "<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n",
    "<strong>Use Cases for Target Encoding</strong><br>\n",
    "Target encoding is great for:\n",
    "<ul>\n",
    "<li><strong>High-cardinality features</strong>: A feature with a large number of categories can be troublesome to encode: a one-hot encoding would generate too many features and alternatives, like a label encoding, might not be appropriate for that feature. A target encoding derives numbers for the categories using the feature's most important property: its relationship with the target.\n",
    "<li><strong>Domain-motivated features</strong>: From prior experience, you might suspect that a categorical feature should be important even if it scored poorly with a feature metric. A target encoding can help reveal a feature's true informativeness.\n",
    "</ul>\n",
    "</blockquote>\n",
    "\n",
    "# Example - MovieLens1M #\n",
    "\n",
    "The [*MovieLens1M*](https://www.kaggle.com/grouplens/movielens-20m-dataset) dataset contains one-million movie ratings by users of the MovieLens website, with features describing each user and movie. This hidden cell sets everything up:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7be38219",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:30.891030Z",
     "iopub.status.busy": "2024-10-24T22:13:30.890588Z",
     "iopub.status.idle": "2024-10-24T22:13:37.886701Z",
     "shell.execute_reply": "2024-10-24T22:13:37.884978Z"
    },
    "papermill": {
     "duration": 7.009428,
     "end_time": "2024-10-24T22:13:37.889702",
     "exception": false,
     "start_time": "2024-10-24T22:13:30.880274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/1532777590.py:7: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
      "  plt.style.use(\"seaborn-whitegrid\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Unique Zipcodes: 3439\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "\n",
    "plt.style.use(\"seaborn-whitegrid\")\n",
    "plt.rc(\"figure\", autolayout=True)\n",
    "plt.rc(\n",
    "    \"axes\",\n",
    "    labelweight=\"bold\",\n",
    "    labelsize=\"large\",\n",
    "    titleweight=\"bold\",\n",
    "    titlesize=14,\n",
    "    titlepad=10,\n",
    ")\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "\n",
    "df = pd.read_csv(\"../input/fe-course-data/movielens1m.csv\")\n",
    "df = df.astype(np.uint8, errors='ignore') # reduce memory footprint\n",
    "print(\"Number of Unique Zipcodes: {}\".format(df[\"Zipcode\"].nunique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "784449c0",
   "metadata": {
    "papermill": {
     "duration": 0.008702,
     "end_time": "2024-10-24T22:13:37.907751",
     "exception": false,
     "start_time": "2024-10-24T22:13:37.899049",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "With over 3000 categories, the `Zipcode` feature makes a good candidate for target encoding, and the size of this dataset (over one-million rows) means we can spare some data to create the encoding.\n",
    "\n",
    "We'll start by creating a 25% split to train the target encoder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "55bccb2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:37.928384Z",
     "iopub.status.busy": "2024-10-24T22:13:37.927972Z",
     "iopub.status.idle": "2024-10-24T22:13:38.330932Z",
     "shell.execute_reply": "2024-10-24T22:13:38.329549Z"
    },
    "papermill": {
     "duration": 0.416641,
     "end_time": "2024-10-24T22:13:38.333936",
     "exception": false,
     "start_time": "2024-10-24T22:13:37.917295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.copy()\n",
    "y = X.pop('Rating')\n",
    "\n",
    "X_encode = X.sample(frac=0.25)\n",
    "y_encode = y[X_encode.index]\n",
    "X_pretrain = X.drop(X_encode.index)\n",
    "y_train = y[X_pretrain.index]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d767c38d",
   "metadata": {
    "papermill": {
     "duration": 0.008511,
     "end_time": "2024-10-24T22:13:38.351385",
     "exception": false,
     "start_time": "2024-10-24T22:13:38.342874",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The `category_encoders` package in `scikit-learn-contrib` implements an m-estimate encoder, which we'll use to encode our `Zipcode` feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e204908a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:38.370609Z",
     "iopub.status.busy": "2024-10-24T22:13:38.370161Z",
     "iopub.status.idle": "2024-10-24T22:13:40.063800Z",
     "shell.execute_reply": "2024-10-24T22:13:40.062394Z"
    },
    "papermill": {
     "duration": 1.707072,
     "end_time": "2024-10-24T22:13:40.067098",
     "exception": false,
     "start_time": "2024-10-24T22:13:38.360026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from category_encoders import MEstimateEncoder\n",
    "\n",
    "# Create the encoder instance. Choose m to control noise.\n",
    "encoder = MEstimateEncoder(cols=[\"Zipcode\"], m=5.0)\n",
    "\n",
    "# Fit the encoder on the encoding split.\n",
    "encoder.fit(X_encode, y_encode)\n",
    "\n",
    "# Encode the Zipcode column to create the final training data\n",
    "X_train = encoder.transform(X_pretrain)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2eea9e0",
   "metadata": {
    "papermill": {
     "duration": 0.008567,
     "end_time": "2024-10-24T22:13:40.084958",
     "exception": false,
     "start_time": "2024-10-24T22:13:40.076391",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's compare the encoded values to the target to see how informative our encoding might be."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cbf6cd8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-24T22:13:40.105502Z",
     "iopub.status.busy": "2024-10-24T22:13:40.104862Z",
     "iopub.status.idle": "2024-10-24T22:13:44.848168Z",
     "shell.execute_reply": "2024-10-24T22:13:44.846499Z"
    },
    "papermill": {
     "duration": 4.756734,
     "end_time": "2024-10-24T22:13:44.851079",
     "exception": false,
     "start_time": "2024-10-24T22:13:40.094345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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T/tbAvOgEtwId46fxDHE9dWtW1dFihTJ9nVbT0tdqWbNmqpTp45GjhypiIiITK9fryE5ERkZqYYNG+bKZ+c3BaWtBaWdUsFq6+r961S9WvVr7tOwYbU8qib3OPWYRicfzPRczMGYTMfUCccwK049rlnJrba62+Fh+2mpKyUnJzPmBgAA5Iht4SY+Pl6LFi3S2bNnZVmWoqOjFR4erhYtWthVEgAAcADbTku5XC6tWLFC7777rhITE1W6dGm1b99eQ4YMsaskAADgALaFm8DAQH388cd2fT0AAHCofDXmBgAAIKcINwAAwFEINwAAwFEINwAAwFEINwAAwFEINwAAwFEINwAAwFEINwAAwFHyzcKZAAAgf5u7OfPip1kJsTld0HMDAAAchXADAAAchXADAAAchXADAAAchXADAAAchXADAAAchXADAAAchXADAAAchXADAAAchXADAAAchXADAAAchXADAAAcxeNwk5KSkht1AAAAeIXH4aZly5b6v//7P+3cuTM36gEAAMgRj8PNqVOnNGfOHD388MPq2LGjpk2bpmPHjuVGbQAAAB7zONx07NhRQUFBsixL+/bt0/jx49WmTRv16dNHS5YsUXx8fG7UCQAA4BaPw824ceO0ceNGffjhh+revbtKliyp1NRUbdmyRf/4xz/UokULvfLKK/rll19yo14AAIBruqGrpQICAtS6dWu9/fbb+vTTT3XXXXfJsixJ0sWLF7VkyRJ169ZNX3zxhVeLBQAAuB7/G3nTpUuX9MUXX2jRokWKjIxMDzYul0utW7dWXFyctm/frvHjx6tDhw5eLRgAAOBaPA43o0aN0qpVqxQfH58easqWLasHH3xQPXr0UKVKlZSSkqK7775bhw8f9nrBAAAA1+JxuFmwYEH6/caNG6tnz55q3769/P0vf1ShQoUUEhKiQ4cOeadKAAAAN3kcboKDg9W1a1c9+uijqlmzZrb7zZw5M0eFAQAA3AiPw817772nwMDALINNamqqJMnPj1UdAACAPTwON3//+9/l5+enXbt2ZXrt9ttvz/Y1AACAvHBDXSxpA4mvlJycnO1rAAAAecWtnpstW7Zoy5YtGZ6bPHlyhse//fabJKlo0aJeKg0AAMBzboebKVOmpD+2LCvD4zQul0u1atXyXnUAAAAecnvMzZUT9V35+Eo333yzXnvtNS+VBgAA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",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(dpi=90)\n",
    "ax = sns.distplot(y, kde=False, norm_hist=True)\n",
    "ax = sns.kdeplot(X_train.Zipcode, color='r', ax=ax)\n",
    "ax.set_xlabel(\"Rating\")\n",
    "ax.legend(labels=['Zipcode', 'Rating']);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24753fb0",
   "metadata": {
    "papermill": {
     "duration": 0.009597,
     "end_time": "2024-10-24T22:13:44.870797",
     "exception": false,
     "start_time": "2024-10-24T22:13:44.861200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The distribution of the encoded `Zipcode` feature roughly follows the distribution of the actual ratings, meaning that movie-watchers differed enough in their ratings from zipcode to zipcode that our target encoding was able to capture useful information.\n",
    "\n",
    "# Your Turn #\n",
    "\n",
    "[**Apply target encoding**](https://www.kaggle.com/kernels/fork/14393917) to features in *Ames* and investigate a surprising way that target encoding can lead to overfitting."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0317934",
   "metadata": {
    "papermill": {
     "duration": 0.009329,
     "end_time": "2024-10-24T22:13:44.889716",
     "exception": false,
     "start_time": "2024-10-24T22:13:44.880387",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/feature-engineering/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "formats": "ipynb"
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 933090,
     "sourceId": 1828856,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 19.877108,
   "end_time": "2024-10-24T22:13:45.926027",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-24T22:13:26.048919",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
